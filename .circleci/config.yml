version: 2
defaults: &defaults
  docker: 
    - image: circleci/python:3.9
  working_directory: ~/project

prepare_venv: &prepare_venv
  run:
    name: Create venv
    command: |
      python3 -m venv venv
      source venv/bin/activate
      pip install --upgrade pip

fetch_data: &fetch_data
  run: 
    name: Set script permission and fetch data 
    command: | 
      source venv/bin/activate
      chmod +x ./script/fetch_kaggle_dataset.sh
      ./script/fetch_kaggle_dataset.sh
jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: Building Project
          command: |
            virtualenv venv
            . venv/bin/activate

  test_classification_model:
    <<: *defaults
    steps:
      - checkout
      - *prepare_venv
      - run:
          name: Install requirements
          command: |
            . venv/bin/activate
            pip install -r package/classification/requirements.txt
      - *fetch_data
      - run: 
          name: Train  Model
          command: |
            . venv/bin/activate
            PYTHONPATH=./package/classification python3 package/classification/classification/train_pipeline.py
      - run: 
          name: Run Tests
          command: | 
            . venv/bin/activate 
            py.test -vv package/classification/tests

  test_ml_api:
    <<: *defaults
    steps: 
      - checkout
      - restore_cache: 
          keys: 
            - py-deps-{{ checksum "package/class-api/requirements.txt"}}
      - run: 
          name: Running Tests 
          command: | 
            virtualenv venv 
            . venv/bin/activate 
            pip install --upgrade pip 
            pip install -r package/class_api/requirements.txt
            py.test -vv package/class_api/tests -m 'not differential'
      - save_cache:
          key: py-deps-{{ checksum "package/class_api/requirements.txt"}}
          paths: 
            - "/venv"
  
  train_upload_classification_model: 
    <<: *defaults
    steps: 
      - checkout
      - *prepare_venv
      - run: 
          name : Install requirements
          command: | 
            . venv/bin/activate 
            pip install -r package/classification/requirements.txt
      - *fetch_data
      - run: 
          name: Train model 
          command: |
            . venv/bin/activate 
            PYTHONPATH=./package/classification python3 package/classification/classification/train_pipeline.py
      - run: 
          name: Publish model to Gemfury
          command: | 
            . venv/bin/activate 
            chmod +x ./script/publish_model.sh
            ./script/publish_model.sh ./package/classification/

  differential_test: 
    <<: *defaults
    steps: 
      - checkout 
      - *prepare_venv
      - run: 
          name : Capturing previous model predictions 
          command: | 
            . venv/bin/activate
            pip install -r package/class_api/requirements.txt
            PYTHONPATH=./package/class_api python3 package/class_api/tests/differential_tests/capture_model_predictions.py
      - run: 
          name: Running Differential Tests
          command: | 
            . venv/bin/activate
            pip install -r package/class_api/requirements.txt
            py.test -vv package/class_api/tests -m differential

  deploy_to_heroku:
    <<: *defaults
    steps: 
      - checkout 
      - run: 
          name: Deploy to Heroku
          command: |
           git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master

  build_push_docker_heroku:
    <<: *defaults
    steps: 
      - checkout 
      - setup_remote_docker: 
          docker_layer_caching: true
      # - run: docker login --username="$HEROKU_EMAIL"  --password-stdin registry.heroku.com
      - run:
          echo "$HEROKU_EMAIL" | docker login --username=_ --password-stdin registry.heroku.com
          echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com
      - run: 
          name: Setup Heroku CLI
          command: |
            wget -q0- https://cli-assets.heroku.com/install-ubuntu.sh | sh
      - run: 
          name: Build and Push image 
          command: |
            make build-ml-api-heroku push-ml-api-heroku
      - run: 
          name: Release to Heroku
          command: | 
            heroku container:release web --app $HEROKU_APP_NAME

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test_classification_model
      - test_ml_api
      - train_upload_classification_model
      - differential_test
      - build_push_docker_heroku
      # - deploy_to_heroku
      - train_upload_classification_model: 
          requires: 
            - build
            - test_classification_model
            - test_ml_api
            - differential_test
      # - deploy_to_heroku:
      - build_push_docker_heroku:
          requires:
            - train_upload_classification_model
          filters:
            branches: 
              only: 
                - master
          
